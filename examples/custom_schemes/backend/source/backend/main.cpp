#include <nui/core.hpp>
#include <nui/rpc.hpp>
#include <nui/window.hpp>

#include <iostream>
#include <filesystem>

// This file is generated by nui.
#include <index.hpp>

using namespace std::string_literals;

int main(int, char** argv)
{
    using namespace Nui;

    std::filesystem::path programDir = std::filesystem::path(argv[0]).parent_path();

    std::cout << "Hello World!" << std::endl;
    CustomScheme scheme{
        .scheme = "nui"s,
        .allowedOrigins = {"*"s},
        .onRequest =
            [](CustomSchemeRequest const& request) {
                std::cout << "Request: " << request.scheme << std::endl;
                std::cout << "URI: " << request.uri << std::endl;
                std::cout << "Method: " << request.method << std::endl;
                std::cout << "Path: " << request.parseUrl()->pathAsString() << std::endl;
                std::cout << "Headers: " << std::endl;
                for (auto const& [key, value] : request.headers)
                    std::cout << "  " << key << ": " << value << std::endl;
                std::cout << "Body: " << request.getContent() << std::endl;
                return CustomSchemeResponse{
                    .statusCode = 200,
                    .reasonPhrase = "OK",
                    .headers =
                        {
                            {"Content-Type"s, "text/plain"s},
                            {"Access-Control-Allow-Origin"s, "*"s},
                            {"Access-Control-Allow-Methods"s, "GET, POST, PUT, DELETE, OPTIONS"s},
                            {"Access-Control-Allow-Headers"s, "*"s},
                        },
                    .body = "Hello World!",
                };
            },
        .treatAsSecure = true,
        .hasAuthorityComponent = true,
    };
    CustomScheme scheme2{
        .scheme = "nui2"s,
        .allowedOrigins = {"*"s},
        .onRequest =
            [](CustomSchemeRequest const& request) {
                std::cout << "Request: " << request.scheme << std::endl;
                std::cout << "URI: " << request.uri << std::endl;
                std::cout << "Method: " << request.method << std::endl;
                std::cout << "Headers: " << std::endl;
                for (auto const& [key, value] : request.headers)
                    std::cout << "  " << key << ": " << value << std::endl;
                std::cout << "Body: " << request.getContent() << std::endl;
                return CustomSchemeResponse{
                    .statusCode = 200,
                    .reasonPhrase = "OK",
                    .headers =
                        {
                            {"Content-Type"s, "text/plain"s},
                            {"Access-Control-Allow-Origin"s, "null"s},
                            {"Access-Control-Allow-Methods"s, "GET, POST, PUT, DELETE, OPTIONS"s},
                            {"Access-Control-Allow-Headers"s, "*"s},
                        },
                    .body = "Hello World!",
                };
            },
        .treatAsSecure = true,
        .hasAuthorityComponent = true,
    };

    Window window{
        WindowOptions{
            // Not needed! Do not disable security on windows!
            //.browserArguments = "--disable-web-security"s,
            .title = "Test Project"s,
            .debug = true,
            .customSchemes = {scheme, scheme2},
        },
    };
    window.setSize(800, 600, Nui::WebViewHint::WEBVIEW_HINT_NONE);

    RpcHub rpcHub{window};
    rpcHub.enableAll();

    window.centerOnPrimaryDisplay();
    window.setHtml(index());

    window.setVirtualHostNameToFolderMapping("host", programDir.string());

    window.run();
}